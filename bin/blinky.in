#!/usr/bin/env python3
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import os
import sys

default_home = os.path.normpath("@blinky_home@")
home = os.environ.get("BLINKY_HOME", default_home)

sys.path.append(os.path.join(home, "python"))

import brbn
import runpy

from argparse import ArgumentParser
from blinky.model import *
from blinky.brbn import *
from faller import *

user_dir = os.path.expanduser("~")
default_config_file = os.path.join(user_dir, ".config", "blinky", "config.py")

description = "Blinky displays results from CI servers"

epilog = """Blinky looks for its configuration in the following locations: (1)
the FILE indicated by --config if set, (2)
$HOME/.config/blinky/config.py, (3) /etc/blinky/config.py."""

parser = ArgumentParser(description=description, epilog=epilog)

parser.add_argument("--http-port", metavar="PORT",
                    help="Serve HTTP at PORT (8000)")

parser.add_argument("--config", default=default_config_file, metavar="FILE",
                    help="Load configuration from FILE")

_log = logger("blinky")

def main():
    add_logged_module("blinky")
    add_logged_module("brbn")
    add_logged_module("tornado")
    
    setup_console_logging("info")

    args = parser.parse_args()
    model = Model()
    config = load_config(args, model)
    http_port = args.http_port

    if http_port is None:
        http_port = config.get("http_port", 8000)
    
    app = Blinky(home, model)
    server = brbn.Server(app, port=http_port)

    model.update()
    model.update_thread.start()

    app.load()
    app.init()
    app.start()

    server.run()

def load_config(args, model):
    config_file = args.config
        
    if not os.path.exists(config_file):
        config_file = os.path.join("/", "etc", "blinky", "config.py")

    if not os.path.exists(config_file):
        sys.exit("Error! No configuration found")
        
    _log.info("Loading configuration from {}".format(config_file))

    init_globals = {"model": model}
    config = runpy.run_path(config_file, init_globals)

    return config
    
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
